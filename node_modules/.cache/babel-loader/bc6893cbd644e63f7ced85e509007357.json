{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactLifecyclesCompat = require('react-lifecycles-compat');\n\nvar _Divider = require('./Divider');\n\nvar _Divider2 = _interopRequireDefault(_Divider);\n\nvar _Hour12Input = require('./TimeInput/Hour12Input');\n\nvar _Hour12Input2 = _interopRequireDefault(_Hour12Input);\n\nvar _Hour24Input = require('./TimeInput/Hour24Input');\n\nvar _Hour24Input2 = _interopRequireDefault(_Hour24Input);\n\nvar _MinuteInput = require('./TimeInput/MinuteInput');\n\nvar _MinuteInput2 = _interopRequireDefault(_MinuteInput);\n\nvar _SecondInput = require('./TimeInput/SecondInput');\n\nvar _SecondInput2 = _interopRequireDefault(_SecondInput);\n\nvar _NativeInput = require('./TimeInput/NativeInput');\n\nvar _NativeInput2 = _interopRequireDefault(_NativeInput);\n\nvar _AmPm = require('./TimeInput/AmPm');\n\nvar _AmPm2 = _interopRequireDefault(_AmPm);\n\nvar _dateFormatter = require('./shared/dateFormatter');\n\nvar _dates = require('./shared/dates');\n\nvar _propTypes3 = require('./shared/propTypes');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar allViews = ['hour', 'minute', 'second'];\n\nvar hoursAreDifferent = function hoursAreDifferent(date1, date2) {\n  return date1 && !date2 || !date1 && date2 || date1 && date2 && date1 !== date2 // TODO: Compare 11:22:00 and 11:22 properly\n  ;\n};\n\nvar findPreviousInput = function findPreviousInput(element) {\n  var previousElement = element.previousElementSibling; // Divider between inputs\n\n  if (!previousElement) {\n    return null;\n  }\n\n  return previousElement.previousElementSibling; // Actual input\n};\n\nvar findNextInput = function findNextInput(element) {\n  var nextElement = element.nextElementSibling; // Divider between inputs\n\n  if (!nextElement) {\n    return null;\n  }\n\n  return nextElement.nextElementSibling; // Actual input\n};\n\nvar focus = function focus(element) {\n  return element && element.focus();\n};\n\nvar removeUnwantedCharacters = function removeUnwantedCharacters(str) {\n  return str.split('').filter(function (a) {\n    return (// We don't want spaces in dates\n      a.charCodeAt(0) !== 32 // Internet Explorer specific\n      && a.charCodeAt(0) !== 8206 // Remove non-ASCII characters\n      && /^[\\x20-\\x7F]*$/.test(a)\n    );\n  }).join('');\n};\n\nvar TimeInput = function (_PureComponent) {\n  _inherits(TimeInput, _PureComponent);\n\n  function TimeInput() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, TimeInput);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TimeInput.__proto__ || Object.getPrototypeOf(TimeInput)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      amPm: null,\n      hour: null,\n      minute: null,\n      second: null\n    }, _this.onKeyDown = function (event) {\n      switch (event.key) {\n        case 'ArrowLeft':\n          {\n            event.preventDefault();\n            var input = event.target;\n            var previousInput = findPreviousInput(input);\n            focus(previousInput);\n            break;\n          }\n\n        case 'ArrowRight':\n        case _this.divider:\n          {\n            event.preventDefault();\n            var _input = event.target;\n            var nextInput = findNextInput(_input);\n            focus(nextInput);\n            break;\n          }\n\n        default:\n      }\n    }, _this.onChange = function (event) {\n      var _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n\n      switch (name) {\n        case 'hour12':\n          {\n            _this.setState(function (prevState) {\n              return {\n                hour: value ? (0, _dates.convert12to24)(parseInt(value, 10), prevState.amPm) : null\n              };\n            }, _this.onChangeExternal);\n\n            break;\n          }\n\n        case 'hour24':\n          {\n            _this.setState({\n              hour: value ? parseInt(value, 10) : null\n            }, _this.onChangeExternal);\n\n            break;\n          }\n\n        default:\n          {\n            _this.setState(_defineProperty({}, name, value ? parseInt(value, 10) : null), _this.onChangeExternal);\n          }\n      }\n    }, _this.onChangeNative = function (event) {\n      var onChange = _this.props.onChange;\n      var value = event.target.value;\n\n      if (!onChange) {\n        return;\n      }\n\n      var processedValue = function () {\n        if (!value) {\n          return null;\n        }\n\n        return value;\n      }();\n\n      onChange(processedValue);\n    }, _this.onChangeAmPm = function (event) {\n      var value = event.target.value;\n\n      _this.setState({\n        amPm: value\n      }, _this.onChangeExternal);\n    }, _this.onChangeExternal = function () {\n      var onChange = _this.props.onChange;\n\n      if (!onChange) {\n        return;\n      }\n\n      var formElements = [_this.hour12Input, _this.hour24Input, _this.minuteInput, _this.secondInput, _this.amPmInput].filter(Boolean);\n      var formElementsWithoutSelect = formElements.slice(0, -1);\n      var values = {};\n      formElements.forEach(function (formElement) {\n        values[formElement.name] = formElement.value;\n      });\n\n      if (formElementsWithoutSelect.every(function (formElement) {\n        return !formElement.value;\n      })) {\n        onChange(null);\n      } else if (formElements.every(function (formElement) {\n        return formElement.value && formElement.checkValidity();\n      })) {\n        var hour = ('0' + (values.hour24 || (0, _dates.convert12to24)(values.hour12, values.amPm))).slice(-2);\n        var minute = ('0' + (values.minute || 0)).slice(-2);\n        var second = ('0' + (values.second || 0)).slice(-2);\n        var timeString = hour + ':' + minute + ':' + second;\n\n        var processedValue = _this.getProcessedValue(timeString);\n\n        onChange(processedValue);\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(TimeInput, [{\n    key: 'getProcessedValue',\n\n    /**\n     * Gets current value in a desired format.\n     */\n    value: function getProcessedValue(value) {\n      var nativeValueParser = this.nativeValueParser;\n      return nativeValueParser(value);\n    }\n    /**\n     * Returns value type that can be returned with currently applied settings.\n     */\n\n  }, {\n    key: 'renderHour12',\n    value: function renderHour12() {\n      var hour = this.state.hour;\n      return _react2.default.createElement(_Hour12Input2.default, _extends({\n        key: 'hour12'\n      }, this.commonInputProps, {\n        value: hour\n      }));\n    }\n  }, {\n    key: 'renderHour24',\n    value: function renderHour24() {\n      var hour = this.state.hour;\n      return _react2.default.createElement(_Hour24Input2.default, _extends({\n        key: 'hour24'\n      }, this.commonInputProps, {\n        value: hour\n      }));\n    }\n  }, {\n    key: 'renderMinute',\n    value: function renderMinute() {\n      var maxDetail = this.props.maxDetail; // Do not display if maxDetail is \"hour\" or less\n\n      if (allViews.indexOf(maxDetail) < 1) {\n        return null;\n      }\n\n      var _state = this.state,\n          hour = _state.hour,\n          minute = _state.minute;\n      return _react2.default.createElement(_MinuteInput2.default, _extends({\n        key: 'minute'\n      }, this.commonInputProps, {\n        hour: hour,\n        maxDetail: maxDetail,\n        value: minute\n      }));\n    }\n  }, {\n    key: 'renderSecond',\n    value: function renderSecond() {\n      var maxDetail = this.props.maxDetail; // Do not display if maxDetail is \"minute\" or less\n\n      if (allViews.indexOf(maxDetail) < 2) {\n        return null;\n      }\n\n      var _state2 = this.state,\n          hour = _state2.hour,\n          minute = _state2.minute,\n          second = _state2.second;\n      return _react2.default.createElement(_SecondInput2.default, _extends({\n        key: 'second'\n      }, this.commonInputProps, {\n        hour: hour,\n        maxDetail: maxDetail,\n        minute: minute,\n        value: second\n      }));\n    }\n  }, {\n    key: 'renderAmPm',\n    value: function renderAmPm() {\n      var amPm = this.state.amPm;\n      return _react2.default.createElement(_AmPm2.default, _extends({\n        key: 'ampm'\n      }, this.commonInputProps, {\n        value: amPm,\n        onChange: this.onChangeAmPm\n      }));\n    }\n  }, {\n    key: 'renderCustomInputs',\n    value: function renderCustomInputs() {\n      var _this2 = this;\n\n      var divider = this.divider,\n          placeholder = this.placeholder;\n      return placeholder.split(divider).map(function (part) {\n        switch (part) {\n          case 'hour-12':\n            return _this2.renderHour12();\n\n          case 'hour-24':\n            return _this2.renderHour24();\n\n          case 'minute':\n            return _this2.renderMinute();\n\n          case 'second':\n            return _this2.renderSecond();\n\n          case 'ampm':\n            return _this2.renderAmPm();\n\n          default:\n            return null;\n        }\n      }).filter(Boolean).reduce(function (result, element, index) {\n        if (index && element.key !== 'ampm') {\n          result.push( // eslint-disable-next-line react/no-array-index-key\n          _react2.default.createElement(_Divider2.default, {\n            key: 'separator_' + index\n          }, divider));\n        }\n\n        result.push(element);\n        return result;\n      }, []);\n    }\n  }, {\n    key: 'renderNativeInput',\n    value: function renderNativeInput() {\n      var _props = this.props,\n          disabled = _props.disabled,\n          maxTime = _props.maxTime,\n          minTime = _props.minTime,\n          name = _props.name,\n          required = _props.required,\n          value = _props.value;\n      return _react2.default.createElement(_NativeInput2.default, {\n        key: 'time',\n        disabled: disabled,\n        maxTime: maxTime,\n        minTime: minTime,\n        name: name,\n        onChange: this.onChangeNative,\n        required: required,\n        value: value,\n        valueType: this.valueType\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var className = this.props.className;\n      return _react2.default.createElement('div', {\n        className: className\n      }, this.renderNativeInput(), this.renderCustomInputs());\n    }\n  }, {\n    key: 'valueType',\n    get: function get() {\n      var maxDetail = this.props.maxDetail;\n      return maxDetail;\n    }\n  }, {\n    key: 'nativeValueParser',\n    get: function get() {\n      switch (this.valueType) {\n        case 'hour':\n        case 'minute':\n          return _dates.getHoursMinutes;\n\n        case 'second':\n          return _dates.getHoursMinutesSeconds;\n\n        default:\n          throw new Error('Invalid valueType.');\n      }\n    } // eslint-disable-next-line class-methods-use-this\n\n  }, {\n    key: 'divider',\n    get: function get() {\n      var locale = this.props.locale;\n      var date = new Date(2017, 0, 1, 21, 12, 13);\n      return removeUnwantedCharacters((0, _dateFormatter.formatTime)(date, locale)).match(/[^0-9]/)[0];\n    } // eslint-disable-next-line class-methods-use-this\n\n  }, {\n    key: 'placeholder',\n    get: function get() {\n      var locale = this.props.locale;\n      var date = new Date(2017, 0, 1, 21, 13, 14);\n      return removeUnwantedCharacters((0, _dateFormatter.formatTime)(date, locale)).replace('21', 'hour-24').replace('9', 'hour-12').replace('13', 'minute').replace('14', 'second').replace(/AM|PM/i, this.divider + 'ampm');\n    }\n  }, {\n    key: 'commonInputProps',\n    get: function get() {\n      var _this3 = this;\n\n      var _props2 = this.props,\n          className = _props2.className,\n          disabled = _props2.disabled,\n          isClockOpen = _props2.isClockOpen,\n          maxTime = _props2.maxTime,\n          minTime = _props2.minTime,\n          required = _props2.required;\n      return {\n        className: className,\n        disabled: disabled,\n        maxTime: maxTime,\n        minTime: minTime,\n        onChange: this.onChange,\n        onKeyDown: this.onKeyDown,\n        placeholder: '--',\n        // This is only for showing validity when editing\n        required: required || isClockOpen,\n        itemRef: function itemRef(ref, name) {\n          // Save a reference to each input field\n          _this3[name + 'Input'] = ref;\n        }\n      };\n    }\n    /**\n     * Called when non-native date input is changed.\n     */\n\n    /**\n     * Called when native date input is changed.\n     */\n\n    /**\n     * Called after internal onChange. Checks input validity. If all fields are valid,\n     * calls props.onChange.\n     */\n\n  }], [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var nextState = {};\n      /**\n       * If isClockOpen flag has changed, we have to update it.\n       * It's saved in state purely for use in getDerivedStateFromProps.\n       */\n\n      if (nextProps.isClockOpen !== prevState.isClockOpen) {\n        nextState.isClockOpen = nextProps.isClockOpen;\n      }\n      /**\n       * If the next value is different from the current one  (with an exception of situation in\n       * which values provided are limited by minDate and maxDate so that the dates are the same),\n       * get a new one.\n       */\n\n\n      var nextValue = nextProps.value;\n\n      if ( // Toggling calendar visibility resets values\n      nextState.isClockOpen // Flag was toggled\n      || hoursAreDifferent(nextValue, prevState.value)) {\n        if (nextValue) {\n          var _convert24to = (0, _dates.convert24to12)((0, _dates.getHours)(nextValue));\n\n          var _convert24to2 = _slicedToArray(_convert24to, 2);\n\n          nextState.amPm = _convert24to2[1];\n          nextState.hour = (0, _dates.getHours)(nextValue);\n          nextState.minute = (0, _dates.getMinutes)(nextValue);\n          nextState.second = (0, _dates.getSeconds)(nextValue);\n        } else {\n          nextState.amPm = null;\n          nextState.hour = null;\n          nextState.minute = null;\n          nextState.second = null;\n        }\n\n        nextState.value = nextValue;\n      }\n\n      return nextState;\n    }\n  }]);\n\n  return TimeInput;\n}(_react.PureComponent);\n\nexports.default = TimeInput;\nTimeInput.defaultProps = {\n  maxDetail: 'minute',\n  name: 'time'\n};\nTimeInput.propTypes = {\n  className: _propTypes2.default.string.isRequired,\n  disabled: _propTypes2.default.bool,\n  isClockOpen: _propTypes2.default.bool,\n  locale: _propTypes2.default.string,\n  maxDetail: _propTypes2.default.oneOf(allViews),\n  maxTime: _propTypes3.isTime,\n  minTime: _propTypes3.isTime,\n  name: _propTypes2.default.string,\n  onChange: _propTypes2.default.func,\n  required: _propTypes2.default.bool,\n  value: _propTypes2.default.oneOfType([_propTypes3.isTime, _propTypes2.default.instanceOf(Date)])\n};\n(0, _reactLifecyclesCompat.polyfill)(TimeInput);","map":null,"metadata":{},"sourceType":"script"}