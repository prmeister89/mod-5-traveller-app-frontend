{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PositiveIntegerNumber = exports.IntegerNumber = exports.PositiveNumber = exports.Number = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _edit = _interopRequireDefault(require(\"react-icons/lib/md/edit\"));\n\nvar _NumPad = _interopRequireDefault(require(\"./NumPad\"));\n\nvar _elements = require(\"../elements\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar DefaultValidation = {\n  float: function float() {\n    return true;\n  },\n  negative: function negative() {\n    return true;\n  }\n};\nvar PositiveValidation = {\n  float: function float() {\n    return true;\n  },\n  negative: function negative(value) {\n    return parseInt(value, 10) > 0;\n  }\n};\nvar IntegerValidation = {\n  float: function float(value) {\n    return parseFloat(value) % 1 === 0;\n  },\n  negative: function negative() {\n    return true;\n  }\n};\nvar PositiveIntegerValidation = {\n  float: function float(value) {\n    return parseFloat(value) % 1 === 0;\n  },\n  negative: function negative(value) {\n    return parseInt(value, 10) > 0;\n  }\n};\n\nvar validation = function validation(Validation) {\n  return function (value) {\n    return !isNaN(value) && Validation.float(value) && Validation.negative(value);\n  };\n};\n\nvar defaultProps = function defaultProps(Validation) {\n  return {\n    element: _elements.KeyPad,\n    validation: validation(Validation),\n    formatInputValue: function formatInputValue(value) {\n      return value.toString();\n    },\n    // TODO\n    keyValid: function keyValid() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n      var key = arguments.length > 1 ? arguments[1] : undefined;\n      var next;\n\n      if (key === \"-\") {\n        next = value.charAt(0) === \"-\" ? value.substr(1) : key + value;\n      } else {\n        next = key === \".\" ? value + key + 1 : value + key;\n      } // eslint-disable-next-line no-restricted-globals\n\n\n      return validation(Validation)(next);\n    },\n    displayRule: function displayRule(value) {\n      return value.replace(/^(-)?0+(0\\.|\\d)/, \"$1$2\");\n    },\n    // remove leading zeros\n    inputButtonContent: _react.default.createElement(_edit.default, null)\n  };\n};\n\nvar Number = (0, _NumPad.default)(defaultProps(DefaultValidation));\nexports.Number = Number;\nvar PositiveNumber = (0, _NumPad.default)(defaultProps(PositiveValidation));\nexports.PositiveNumber = PositiveNumber;\nvar IntegerNumber = (0, _NumPad.default)(defaultProps(IntegerValidation));\nexports.IntegerNumber = IntegerNumber;\nvar PositiveIntegerNumber = (0, _NumPad.default)(defaultProps(PositiveIntegerValidation));\nexports.PositiveIntegerNumber = PositiveIntegerNumber;","map":null,"metadata":{},"sourceType":"script"}