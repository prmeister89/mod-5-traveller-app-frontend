{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatTime = undefined;\n\nvar _getUserLocale = require('get-user-locale');\n\nvar _getUserLocale2 = _interopRequireDefault(_getUserLocale);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar formatterCache = {};\n/**\n * Gets Intl-based date formatter from formatter cache. If it doesn't exist in cache\n * just yet, it will be created on the fly.\n */\n\nvar getFormatter = function getFormatter(options, locale) {\n  if (!locale) {\n    // Default parameter is not enough as it does not protect us from null values\n    // eslint-disable-next-line no-param-reassign\n    locale = (0, _getUserLocale2.default)();\n  }\n\n  var stringifiedOptions = JSON.stringify(options);\n\n  if (!formatterCache[locale]) {\n    formatterCache[locale] = {};\n  }\n\n  if (!formatterCache[locale][stringifiedOptions]) {\n    formatterCache[locale][stringifiedOptions] = new Intl.DateTimeFormat(locale, options).format;\n  }\n\n  return formatterCache[locale][stringifiedOptions];\n}; // eslint-disable-next-line import/prefer-default-export\n\n\nvar formatTime = exports.formatTime = function formatTime(date, locale) {\n  return getFormatter({\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric'\n  }, locale)(date);\n};","map":null,"metadata":{},"sourceType":"script"}