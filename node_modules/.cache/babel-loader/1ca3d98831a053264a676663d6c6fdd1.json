{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _dates = require('../shared/dates');\n\nvar _propTypes3 = require('../shared/propTypes');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar NativeInput = function (_PureComponent) {\n  _inherits(NativeInput, _PureComponent);\n\n  function NativeInput() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, NativeInput);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = NativeInput.__proto__ || Object.getPrototypeOf(NativeInput)).call.apply(_ref, [this].concat(args))), _this), _this.stopPropagation = function (event) {\n      return event.stopPropagation();\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(NativeInput, [{\n    key: 'render',\n    value: function render() {\n      var nativeValueParser = this.nativeValueParser,\n          step = this.step;\n      var _props = this.props,\n          disabled = _props.disabled,\n          maxTime = _props.maxTime,\n          minTime = _props.minTime,\n          name = _props.name,\n          onChange = _props.onChange,\n          required = _props.required,\n          value = _props.value;\n      return _react2.default.createElement('input', {\n        type: 'time',\n        disabled: disabled,\n        max: maxTime ? nativeValueParser(maxTime) : null,\n        min: minTime ? nativeValueParser(minTime) : null,\n        name: name,\n        onChange: onChange,\n        onFocus: this.stopPropagation,\n        required: required,\n        step: step,\n        style: {\n          visibility: 'hidden',\n          position: 'absolute',\n          top: '-9999px',\n          left: '-9999px'\n        },\n        value: value ? nativeValueParser(value) : ''\n      });\n    }\n  }, {\n    key: 'nativeValueParser',\n    get: function get() {\n      var valueType = this.props.valueType;\n\n      switch (valueType) {\n        case 'hour':\n          return function (value) {\n            return (0, _dates.getHours)(value) + ':00';\n          };\n\n        case 'minute':\n          return _dates.getHoursMinutes;\n\n        case 'second':\n          return _dates.getHoursMinutesSeconds;\n\n        default:\n          throw new Error('Invalid valueType.');\n      }\n    }\n  }, {\n    key: 'step',\n    get: function get() {\n      var valueType = this.props.valueType;\n\n      switch (valueType) {\n        case 'hour':\n          return 3600;\n\n        case 'minute':\n          return 60;\n\n        case 'second':\n          return 1;\n\n        default:\n          throw new Error('Invalid valueType.');\n      }\n    }\n  }]);\n\n  return NativeInput;\n}(_react.PureComponent);\n\nexports.default = NativeInput;\nNativeInput.propTypes = {\n  disabled: _propTypes2.default.bool,\n  maxTime: _propTypes3.isTime,\n  minTime: _propTypes3.isTime,\n  name: _propTypes2.default.string,\n  onChange: _propTypes2.default.func,\n  required: _propTypes2.default.bool,\n  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.instanceOf(Date)]),\n  valueType: _propTypes3.isValueType\n};","map":null,"metadata":{},"sourceType":"script"}