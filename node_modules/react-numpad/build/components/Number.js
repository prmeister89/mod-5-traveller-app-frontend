"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PositiveIntegerNumber = exports.IntegerNumber = exports.PositiveNumber = exports.Number = void 0;

var _react = _interopRequireDefault(require("react"));

var _edit = _interopRequireDefault(require("react-icons/lib/md/edit"));

var _NumPad = _interopRequireDefault(require("./NumPad"));

var _elements = require("../elements");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DefaultValidation = {
  float: function float() {
    return true;
  },
  negative: function negative() {
    return true;
  }
};
var PositiveValidation = {
  float: function float() {
    return true;
  },
  negative: function negative(value) {
    return parseInt(value, 10) > 0;
  }
};
var IntegerValidation = {
  float: function float(value) {
    return parseFloat(value) % 1 === 0;
  },
  negative: function negative() {
    return true;
  }
};
var PositiveIntegerValidation = {
  float: function float(value) {
    return parseFloat(value) % 1 === 0;
  },
  negative: function negative(value) {
    return parseInt(value, 10) > 0;
  }
};

var validation = function validation(Validation) {
  return function (value) {
    return !isNaN(value) && Validation.float(value) && Validation.negative(value);
  };
};

var defaultProps = function defaultProps(Validation) {
  return {
    element: _elements.KeyPad,
    validation: validation(Validation),
    formatInputValue: function formatInputValue(value) {
      return value.toString();
    },
    // TODO
    keyValid: function keyValid() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var key = arguments.length > 1 ? arguments[1] : undefined;
      var next;

      if (key === "-") {
        next = value.charAt(0) === "-" ? value.substr(1) : key + value;
      } else {
        next = key === "." ? value + key + 1 : value + key;
      } // eslint-disable-next-line no-restricted-globals


      return validation(Validation)(next);
    },
    displayRule: function displayRule(value) {
      return value.replace(/^(-)?0+(0\.|\d)/, "$1$2");
    },
    // remove leading zeros
    inputButtonContent: _react.default.createElement(_edit.default, null)
  };
};

var Number = (0, _NumPad.default)(defaultProps(DefaultValidation));
exports.Number = Number;
var PositiveNumber = (0, _NumPad.default)(defaultProps(PositiveValidation));
exports.PositiveNumber = PositiveNumber;
var IntegerNumber = (0, _NumPad.default)(defaultProps(IntegerValidation));
exports.IntegerNumber = IntegerNumber;
var PositiveIntegerNumber = (0, _NumPad.default)(defaultProps(PositiveIntegerValidation));
exports.PositiveIntegerNumber = PositiveIntegerNumber;