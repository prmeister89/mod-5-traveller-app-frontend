"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _accessTime = _interopRequireDefault(require("react-icons/lib/md/access-time"));

var _moment = _interopRequireDefault(require("moment"));

var _NumPad = _interopRequireDefault(require("./NumPad"));

var _date = _interopRequireDefault(require("../utils/date"));

var _elements = require("../elements");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var validation = function validation() {
  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  return value.length === 12;
};

var formatInputValue = function formatInputValue(value) {
  return value.toString().replace(/\D+/g, '');
};

var keyValid = function keyValid() {
  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var key = arguments.length > 1 ? arguments[1] : undefined;
  var dateFormat = arguments.length > 2 ? arguments[2] : undefined;
  if (value.length === 12 || key === '-' || key === '.') return false;

  if (value.length < 8) {
    // verify date
    return _date.default.validate(value, key, dateFormat);
  } // verify time


  var timeFormat = 'HH:mm';
  var time = value.substr(8, 4) + key + '0000'.substring(Math.max(0, value.length - 8));
  return (0, _moment.default)(time, timeFormat).isValid();
};

var displayRule = function displayRule() {
  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var dateFormat = arguments.length > 1 ? arguments[1] : undefined;
  var time = value.substring(8, 12);
  time += '_'.repeat(4 - time.length);
  var displayTime = [time.substr(0, 2), time.substr(2, 2)];
  return "".concat(_date.default.display(value, dateFormat), " ").concat(displayTime.join(':'));
};

var inputButtonContent = _react.default.createElement(_accessTime.default, null);

var float = false;
var negative = false;

var _default = (0, _NumPad.default)({
  element: _elements.KeyPad,
  validation: validation,
  formatInputValue: formatInputValue,
  displayRule: displayRule,
  inputButtonContent: inputButtonContent,
  float: float,
  negative: negative,
  keyValid: keyValid
});

exports.default = _default;